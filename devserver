#!/usr/bin/env python

import argparse
import os
import psutil
import redis
import signal
import subprocess


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--max-run-time', type=int)
    parser.add_argument('--port', type=int)
    parser.add_argument('--debug', action='store_true', default=False)

    return parser.parse_args()


def handler(signum, frame):
    p = psutil.Process()
    for child in p.children():
        child.send_signal(signum)


def _api_webserver_path():
    return os.path.join(os.path.dirname(__file__), 'ptero_petri/api/wsgi.py')


def _setup_rabbitmq():
    subprocess.call(['ptero', 'configure-rabbitmq'], close_fds=True)


def _purge_rabbitmq():
    pass


def _purge_redis():
    conn = redis.Redis()
    conn.flushall()


def _start_api_server(port, debug):
    env = os.environ.data
    env['PYTHONPATH'] = os.path.dirname(__file__)

    command_line = ['python', _api_webserver_path()]
    if port is not None:
        command_line.extend(['--port', str(port)])

    if debug:
        command_line.append('--debug')

    return subprocess.Popen(command_line, env=env, close_fds=True)


def _start_petri_worker():
    return subprocess.Popen(['ptero', 'orchestrator'], close_fds=True)


def _ptero_config_path():
    return os.path.abspath(os.path.join(os.path.dirname(__file__), 'config'))


def main(port, debug):
    os.environ['PTERO_CONFIG_PATH'] = _ptero_config_path()
    _setup_rabbitmq()
    _purge_rabbitmq()
    _purge_redis()

    api_server = _start_api_server(port=port, debug=debug)
    petri_worker = _start_petri_worker()
    api_server.wait()
    petri_worker.wait()


if __name__ == '__main__':
    arguments = parse_args()

    signal.signal(signal.SIGINT, handler)
    signal.signal(signal.SIGTERM, handler)

    if arguments.max_run_time:
        signal.signal(signal.SIGALRM, handler)
        signal.alarm(arguments.max_run_time)

    main(port=arguments.port, debug=arguments.debug)
